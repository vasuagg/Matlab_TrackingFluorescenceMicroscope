% RTTRACE  Reads time tags from GT658 using mex interface
%   time0 = rttags(ixBoard, numTimeTags, timeOut) reads 
%   up to (numTimeTags) arrival times or up to (timeOut) seconds of data from 
%   GT658 board (ixBoard).
%
%   time0 = rttags(ixBoard, numTimeTags, timeOut, ixChannel)
%   Reads from GT658 channel (ixChannel)
%
%   [time0, time1] = rttags(ixBoard, numTimeTags, timeOut)
%   reads from both channels of GT658.
%
%   See also rttrace, capture3d, acquire
function [time0, time1, time2, time3] = rttags_sync(numTimeTags, timeOut, ixChannel0, ixChannel1);
global LineState;
global IntState;
% We need the board index, number of time tags, and timeOut
if nargin ~= 4,
    error('Four inputs required');
end;

if ixChannel0 > 2 | ixChannel0 < 0 | ixChannel1 > 2 | ixChannel1 < 0,
    error('Invalid channel specifications. Note: for single-channel measurements, use rttags() instead.');
end;

fprintf('Reading up to %d tags (for up to %gs) from both GT658 boards.\n', numTimeTags, timeOut);
fprintf('\tBoard 0 active channels: 
if ixChannel0 < 2,
    fprintf('channel %d.\n', ixChannel);
else
    fprintf('both channels.\n');
end;

fprintf('\tBoard 1 active channels: 
if ixChannel1 < 2,
    fprintf('channel %d.\n', ixChannel1);
else
    fprintf('both channels.\n');
end;

% Must prepare a digital output structure for timed_read_mex to use to
% trigger the GuideTech boards.
dio = digitalio('nidaq', 'Dev1');
hline = addline(dio, [0:4,7], 'Out'); % Line 7 is the trigger out line
PreTrigLineState = [LineState, IntState, 0];
putvalue(dio, PreTrigLineState);
TrigLineState = [LineState, IntState, 1];

numOutputs = 2 + (ixChannel0 == 2) + (ixChannel1 == 2);

% Finally, read the times from the GT658
if numOutputs == 2,
    [time0, time1] = timed_read_mex(ixChannel0, ixChannel1, numTimeTags, timeOut, dio, TrigLineState);
else if numOutputs == 3,
        [time0, time1, time2] = sync_timed_read_mex(ixChannel0, ixChannel1, numTimeTags, timeOut, dio, TrigLineState);
    else
        if numOutputs == 4,
                    [time0, time1, time2, time3] = sync_timed_read_mex(ixChannel0, ixChannel1, numTimeTags, timeOut, dio, TrigLineState);
        end;
    end;
end;

putvalue(dio, PreTrigLineState); % Reset line to pre-triggered value

fprintf('Time tags read: ');
fprintf('Board 0: ');
if(ixChannel0 < 2)
    fprintf('%d\n', length(time0));
else
    fprintf('channel 0: %d\tchannel 1: %d\n', length(time0), length(time1));
end;

fprintf('Board 1: ');
if(ixChannel1 < 2)
    if ixChannel0 < 2,
        fprintf('%d\n', length(time0));
    else
        fprintf('
else
    fprintf('channel 0: %d\tchannel 1: %d\n', length(time0), length(time1));
end;


if(ixChannel0 < 2)
    fprintf('%g kHz on channel %d (uncorrected)\n', length(time0) / time0(end) / 1000, ixChannel);
else
    fprintf('%g kHz on channel 0 (uncorrected)\n', length(time0) / time0(end) / 1000);
    fprintf('%g kHz on channel 1 (uncorrected)\n', length(time1) / time1(end) / 1000);
end;
return;
        